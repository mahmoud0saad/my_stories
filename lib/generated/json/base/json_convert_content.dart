// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:konsolto_app/CommonUtils/model_soket/new_meeting_entity.dart';
import 'package:konsolto_app/generated/json/new_meeting_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case NewMeetingEntity:
			return newMeetingEntityFromJson(data as NewMeetingEntity, json) as T;			case NewMeetingData:
			return newMeetingDataFromJson(data as NewMeetingData, json) as T;			case NewMeetingDataMeeting:
			return newMeetingDataMeetingFromJson(data as NewMeetingDataMeeting, json) as T;			case NewMeetingDataMeetingSettings:
			return newMeetingDataMeetingSettingsFromJson(data as NewMeetingDataMeetingSettings, json) as T;			case NewMeetingDataMeetingSettingsGlobalDialInNumber:
			return newMeetingDataMeetingSettingsGlobalDialInNumberFromJson(data as NewMeetingDataMeetingSettingsGlobalDialInNumber, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {			case NewMeetingEntity:
			return newMeetingEntityToJson(data as NewMeetingEntity);			case NewMeetingData:
			return newMeetingDataToJson(data as NewMeetingData);			case NewMeetingDataMeeting:
			return newMeetingDataMeetingToJson(data as NewMeetingDataMeeting);			case NewMeetingDataMeetingSettings:
			return newMeetingDataMeetingSettingsToJson(data as NewMeetingDataMeetingSettings);			case NewMeetingDataMeetingSettingsGlobalDialInNumber:
			return newMeetingDataMeetingSettingsGlobalDialInNumberToJson(data as NewMeetingDataMeetingSettingsGlobalDialInNumber);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'NewMeetingEntity':
			return NewMeetingEntity().fromJson(json);			case 'NewMeetingData':
			return NewMeetingData().fromJson(json);			case 'NewMeetingDataMeeting':
			return NewMeetingDataMeeting().fromJson(json);			case 'NewMeetingDataMeetingSettings':
			return NewMeetingDataMeetingSettings().fromJson(json);			case 'NewMeetingDataMeetingSettingsGlobalDialInNumber':
			return NewMeetingDataMeetingSettingsGlobalDialInNumber().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'NewMeetingEntity':
			return List<NewMeetingEntity>();			case 'NewMeetingData':
			return List<NewMeetingData>();			case 'NewMeetingDataMeeting':
			return List<NewMeetingDataMeeting>();			case 'NewMeetingDataMeetingSettings':
			return List<NewMeetingDataMeetingSettings>();			case 'NewMeetingDataMeetingSettingsGlobalDialInNumber':
			return List<NewMeetingDataMeetingSettingsGlobalDialInNumber>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}